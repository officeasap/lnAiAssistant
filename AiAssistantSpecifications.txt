╔══════════════════════════════════════════════════════════════════════════════╗
║                    LONI ASSISTANT SPECIFICATIONS v1.0                        ║
║                     Sovereign AI Interface Architecture                      ║
╚══════════════════════════════════════════════════════════════════════════════╝

═══════════════════════════════════════════════════════════════════════════════
  1. ARCHITECTURAL OVERVIEW
═══════════════════════════════════════════════════════════════════════════════

LONI ASSISTANT is a sovereign, encrypted AI interface built with React 18.3.1,
designed for elite autonomy and zero traceability. The system provides full
ChatGPT-grade capabilities with mythical branding and professional UI/UX.

Technology Stack:
  • Frontend Framework: React 18.3.1
  • Build Tool: Vite 4+
  • Routing: React Router DOM 6.30.1
  • Styling: Tailwind CSS 3.x + Custom Design System
  • UI Components: shadcn/ui (Radix UI Primitives)
  • Animations: Framer Motion 12.23.24
  • Icons: Lucide React 0.462.0
  • Notifications: Sonner 1.7.4
  • State Management: React Hooks (useState, useEffect, useRef)
  • SEO: React Helmet 6.1.0

═══════════════════════════════════════════════════════════════════════════════
  2. DESIGN SYSTEM
═══════════════════════════════════════════════════════════════════════════════

COLOR PALETTE (HSL Format):
  --background: 0 0% 7%           // Primary Black
  --foreground: 0 0% 98%          // White text
  --card: 0 0% 12%                // Obsidian Gray
  --card-foreground: 0 0% 98%     // Card text
  --primary: 217 91% 60%          // Signal Blue
  --primary-foreground: 0 0% 98%  // Primary text
  --secondary: 76 89% 61%         // Signal Green
  --secondary-foreground: 0 0% 7% // Secondary text
  --accent: 45 93% 58%            // Crypto Gold
  --accent-foreground: 0 0% 7%    // Accent text
  --muted: 0 0% 15%               // Muted background
  --muted-foreground: 0 0% 64%    // Muted text
  --border: 0 0% 20%              // Border color
  --neon-green: 120 60% 65%       // Korean Creed

CUSTOM UTILITIES:
  .paper-twist       // Multi-layer shadow effect for depth
  .signal-glow       // Box shadow with Signal Green
  .crypto-glow       // Box shadow with Crypto Gold
  .shadow-silver     // Mirror sparkle effect
  .frame-bounce      // Bounce animation (2s infinite)

TYPOGRAPHY:
  Font Family: System font stack (ui-sans-serif, system-ui, sans-serif)
  Headings: Bold weight
  Body Text: 16px base size
  Labels: 14px
  Line Height: 1.5 (body), 1.2 (headings)

LAYOUT SYSTEM:
  Grid: 12-column responsive grid
  Max Container Width: 1280px
  Vertical Padding: 64px
  Horizontal Padding: 16px (mobile), 24px (desktop)
  Mobile Breakpoint: 768px

═══════════════════════════════════════════════════════════════════════════════
  3. UI/UX COMPONENTS
═══════════════════════════════════════════════════════════════════════════════

MAIN LAYOUT STRUCTURE:
┌─────────────────────────────────────────────────────────────────────────────┐
│  Header: [☰ Menu] LONI ASSISTANT                                  [Profile] │
├──────────────┬──────────────────────────────────────────────────────────────┤
│              │                                                              │
│   SIDEBAR    │                   CHAT INTERFACE                            │
│              │                                                              │
│  • New Chat  │  ┌─────────────────────────────────────────────┐            │
│              │  │ Welcome message...                          │            │
│  Recent:     │  │ [Assistant Avatar] LONI                     │            │
│  - Chat 1    │  │ [Copy] [Regenerate] [Share]                 │            │
│  - Chat 2    │  └─────────────────────────────────────────────┘            │
│              │                                                              │
│  Pinned:     │  ┌─────────────────────────────────────────────┐            │
│  - Important │  │ User message...                              │            │
│              │  │ [User Avatar] You                            │            │
│  Folders:    │  └─────────────────────────────────────────────┘            │
│  📁 Work     │                                                              │
│  📁 Personal │  ┌──────────────────────────────────────────────┐           │
│              │  │ [Textarea: Message LONI ASSISTANT...]        │           │
│  [⚙️ Settings]│  │ [📎 Upload] [🎤 Voice] [➤ Send]              │           │
│              │  └──────────────────────────────────────────────┘           │
└──────────────┴──────────────────────────────────────────────────────────────┘

SIDEBAR (ChatLayout.tsx):
  • Width: 280px (desktop), collapsible on mobile
  • Sections:
    - "New Chat" button (top, primary action)
    - Pinned Chats (collapsible accordion)
    - Recent Chats (scrollable list with timestamps)
    - Folders (Pro tier feature, drag-and-drop)
    - Settings button (bottom)
  • Animations: slide-in-right, fade-in
  • State: Managed via useState (isCollapsed)

CHAT INTERFACE (ChatInterface.tsx):
  • Message Display:
    - ScrollArea with auto-scroll to bottom
    - Animated message cards (Framer Motion)
    - User messages: right-aligned, max-width 85%
    - Assistant messages: left-aligned, max-width 85%
    - Action buttons: Copy, Regenerate, Share
  • Input Panel:
    - Multiline textarea with auto-resize
    - File upload button (Paperclip icon)
    - Voice input button (Mic icon)
    - Send button (arrow icon)
    - Character counter (optional)
  • Typing Indicator:
    - Three bouncing dots with staggered animation
    - "LONI is thinking..." message
  • Styling:
    - All cards use .paper-twist + .animate-frame-bounce + .shadow-silver
    - Buttons: rounded-[18px] with hover:animate-bounce

SETTINGS PANEL (SettingsPanel.tsx):
  • Modal overlay (Sheet component from shadcn/ui)
  • Sections (collapsible accordions):
    1. Account Info (name, email, subscription tier)
    2. Conversation Modes:
       - Quick Response (default)
       - Think Deeper
       - Study Mode
       - Smart Mode
    3. Voice Settings:
       - Voice selection dropdown
       - Enable/disable voice responses
    4. Memory & Personalization:
       - Toggle memory on/off
       - View/delete stored memories
    5. Privacy & Data:
       - Chat history management
       - Data sharing preferences
       - Privacy policy link
    6. Language Preferences:
       - Language dropdown
  • Animations: slide-in from right, fade overlay

═══════════════════════════════════════════════════════════════════════════════
  4. ANIMATION SYSTEM
═══════════════════════════════════════════════════════════════════════════════

KEYFRAME ANIMATIONS (index.css):
  @keyframes zoom-blink-out:
    0%: opacity 1, transform scale(1)
    50%: opacity 0.5, transform scale(1.1)
    100%: opacity 0, transform scale(1.2)

  @keyframes zoom-blink-in:
    0%: opacity 0, transform scale(0.8)
    50%: opacity 0.5, transform scale(0.95)
    100%: opacity 1, transform scale(1)

  @keyframes bounce:
    0%, 100%: transform translateY(0)
    50%: transform translateY(-10px)

  @keyframes frame-bounce:
    0%, 100%: transform translateY(0)
    50%: transform translateY(-5px)

TAILWIND ANIMATION CLASSES (tailwind.config.ts):
  animate-zoom-blink-out: 0.6s ease-out forwards
  animate-zoom-blink-in: 0.6s ease-out forwards
  animate-bounce: 2s infinite
  animate-frame-bounce: 2s infinite

FRAMER MOTION PATTERNS:
  Message Cards:
    initial: { opacity: 0, y: 10 }
    animate: { opacity: 1, y: 0 }
    transition: { duration: 0.3, delay: index * 0.05 }

  Hover Effects:
    whileHover: { scale: 1.05 }
    transition: { type: "spring", stiffness: 300 }

═══════════════════════════════════════════════════════════════════════════════
  5. ENVIRONMENT CONFIGURATION
═══════════════════════════════════════════════════════════════════════════════

IMPORTANT: Lovable uses Vite, so all environment variables MUST use VITE_ prefix.
Access variables via: import.meta.env.VITE_VARIABLE_NAME

FRONTEND ENVIRONMENT VARIABLES (.env):
  # AI Configuration (Loaded from .env for dynamic configuration)
  VITE_AI_MODEL=llama3                          // Default AI model
  VITE_AI_ENDPOINT=http://localhost:11434/api/generate  // AI generation endpoint
  VITE_MEMORY_ENDPOINT=http://localhost:3001/memory     // Memory management
  VITE_VOICE_ENGINE=local-whisper               // Voice recognition engine
  VITE_FILE_UPLOAD_ENDPOINT=http://localhost:3003/upload // File analysis endpoint

  # Telegram Integration
  VITE_TELEGRAM_BOT_URL=http://localhost:3002/telegram  // Telegram bot API

  # UI Configuration
  VITE_CONVERSATION_MODE=smart                  // Default conversation mode
  VITE_THEME=dark                               // Default theme

BACKEND ENVIRONMENT VARIABLES (if using local server):
  MODEL_PATH=./models/llama3-8b                 // Path to AI model files
  PORT=11434                                    // Server port
  ENABLE_MEMORY=true                            // Enable memory features
  ENABLE_VOICE=true                             // Enable voice features
  TELEGRAM_BOT_TOKEN=your_bot_token_here        // Telegram bot authentication
  UPLOAD_DIR=./uploads                          // File upload directory

ENVIRONMENT VARIABLE USAGE LOCATIONS:
  1. ChatInterface.tsx:
     - VITE_FILE_UPLOAD_ENDPOINT (line ~40)
     - VITE_AI_ENDPOINT (line ~41)
     - VITE_AI_MODEL (line ~42)
     Comment: "// Loaded from .env for dynamic configuration"

  2. Future API integration files (when backend is connected):
     - All API calls should reference VITE_* variables
     - Never hardcode endpoints

═══════════════════════════════════════════════════════════════════════════════
  6. FILE UPLOAD SYSTEM
═══════════════════════════════════════════════════════════════════════════════

FEATURE: File Upload for Analysis

LOCATION: ChatInterface.tsx (input panel, right side)

UI COMPONENT:
  • Icon: Paperclip (lucide-react)
  • Position: Bottom-right of input panel, above voice/send buttons
  • Styling: rounded-[18px] hover:animate-bounce hover:shadow-silver
  • Hidden file input: <input type="file" ref={fileInputRef} className="hidden" />

WORKFLOW:
  1. User clicks Paperclip icon
  2. File selector opens (accept="*/*")
  3. User selects file
  4. Frontend displays upload message with filename and size
  5. File sent to VITE_FILE_UPLOAD_ENDPOINT via POST request
  6. Loading animation shows (uploadingFile state)
  7. Backend analyzes file (LLaMA model or other AI service)
  8. Response displayed in chat feed as assistant message
  9. File input reset for next upload

SUPPORTED FILE TYPES:
  • Documents: PDF, DOCX, TXT, MD
  • Images: PNG, JPG, WEBP
  • Code: JS, TS, PY, etc.
  • Data: JSON, CSV, XML

ERROR HANDLING:
  • File too large (>10MB): Show error toast
  • Network error: Retry button in message
  • Invalid file type: Warning message

═══════════════════════════════════════════════════════════════════════════════
  7. CONVERSATION MODES
═══════════════════════════════════════════════════════════════════════════════

MODES (selectable in Settings Panel):

1. QUICK RESPONSE
   - Fast, concise answers
   - Minimal processing time
   - Best for simple queries

2. THINK DEEPER
   - Extended reasoning
   - Multi-step problem solving
   - Detailed explanations

3. STUDY MODE
   - Educational focus
   - Step-by-step breakdowns
   - Practice problems and quizzes

4. SMART MODE
   - Adaptive intelligence
   - Context-aware responses
   - Learns from conversation patterns

MODE PERSISTENCE:
  • Stored in localStorage
  • Synced across sessions
  • Displayed in chat input footer: "Mode: [Current Mode]"

═══════════════════════════════════════════════════════════════════════════════
  8. BACKEND PROTOCOLS (Future Integration)
═══════════════════════════════════════════════════════════════════════════════

LOVABLE CLOUD INTEGRATION:
  • Database: PostgreSQL (via Supabase)
  • Authentication: Email/password, Google OAuth
  • Storage: File buckets for uploads
  • Edge Functions: Serverless API endpoints

RECOMMENDED AI INTEGRATION:
  • Use Lovable AI Gateway: https://ai.gateway.lovable.dev/v1/chat/completions
  • Models available:
    - google/gemini-2.5-flash (default, balanced)
    - google/gemini-2.5-pro (strongest reasoning)
    - openai/gpt-5 (premium, most capable)
  • Streaming support: Server-Sent Events (SSE)
  • No API keys needed (auto-provisioned with Lovable Cloud)

TELEGRAM BOT INTEGRATION (Optional):
  • Endpoint: VITE_TELEGRAM_BOT_URL
  • Token: Stored in backend secrets
  • Capabilities: Send/receive messages, file sharing
  • Use for notifications and mobile access

MEMORY ENGINE (Optional):
  • Endpoint: VITE_MEMORY_ENDPOINT
  • Store conversation context
  • User preferences and patterns
  • Cross-session continuity

═══════════════════════════════════════════════════════════════════════════════
  9. SECURITY & PRIVACY PRINCIPLES
═══════════════════════════════════════════════════════════════════════════════

SOVEREIGN PRINCIPLES:
  ✓ Zero traceability architecture
  ✓ End-to-end encryption for all communications
  ✓ No third-party analytics or tracking
  ✓ User data stays on user-controlled infrastructure
  ✓ Frontend-only Supabase (encrypted vault model)
  ✓ Telegram as only external messenger (optional)

DATA MANAGEMENT:
  • Chat history: Stored locally or in encrypted Lovable Cloud database
  • User settings: localStorage + cloud sync
  • Uploaded files: Temporary processing, immediate deletion post-analysis
  • No data sharing with third parties
  • Full GDPR compliance

AUTHENTICATION:
  • Email/password (hashed with bcrypt)
  • Google OAuth (optional)
  • No session tracking across devices without explicit sync

═══════════════════════════════════════════════════════════════════════════════
  10. SCROLLBAR CUSTOMIZATION
═══════════════════════════════════════════════════════════════════════════════

WEBKIT SCROLLBAR STYLING (index.css):
  ::-webkit-scrollbar:
    width: 8px
    height: 8px

  ::-webkit-scrollbar-track:
    background: hsl(var(--muted))
    border-radius: 4px

  ::-webkit-scrollbar-thumb:
    background: hsl(var(--primary) / 0.5)
    border-radius: 4px
    &:hover: background: hsl(var(--primary) / 0.7)

FIREFOX SCROLLBAR:
  scrollbar-width: thin
  scrollbar-color: hsl(var(--primary) / 0.5) hsl(var(--muted))

BEHAVIOR:
  • Visible on hover
  • Smooth scroll behavior (scroll-behavior: smooth)
  • Auto-scroll to bottom on new messages

═══════════════════════════════════════════════════════════════════════════════
  11. RESPONSIVE DESIGN
═══════════════════════════════════════════════════════════════════════════════

BREAKPOINTS:
  • Mobile: 0-767px
  • Tablet: 768px-1023px
  • Desktop: 1024px+

MOBILE OPTIMIZATIONS:
  • Collapsible sidebar (hamburger menu)
  • Touch-friendly buttons (min 44x44px)
  • Simplified navigation
  • Swipe gestures for chat history
  • Full-screen chat interface
  • Bottom-anchored input panel

TABLET OPTIMIZATIONS:
  • Side-by-side layout (sidebar + chat)
  • Optimized touch targets
  • Landscape/portrait mode handling

═══════════════════════════════════════════════════════════════════════════════
  12. TESTING & VALIDATION CHECKLIST
═══════════════════════════════════════════════════════════════════════════════

PRE-DEPLOYMENT CHECKS:
  ☐ All .env variables properly injected
  ☐ File upload endpoint receives and parses files
  ☐ AI model responds to uploaded content
  ☐ Chat history persists across sessions
  ☐ Settings changes save correctly
  ☐ All animations render smoothly (60fps)
  ☐ Responsive design works on mobile/tablet/desktop
  ☐ Scrollbars display correctly across browsers
  ☐ Voice input captures audio (if enabled)
  ☐ Theme switching works (light/dark)
  ☐ No console errors in production build

PERFORMANCE TARGETS:
  • First Contentful Paint: < 1.5s
  • Time to Interactive: < 3s
  • Lighthouse Score: > 90
  • Bundle size: < 500KB (gzipped)

═══════════════════════════════════════════════════════════════════════════════
  13. DEPLOYMENT CONFIGURATION
═══════════════════════════════════════════════════════════════════════════════

LOVABLE DEPLOYMENT:
  • Click "Publish" button (top-right)
  • Automatic deployment to Lovable hosting
  • Custom domain support (paid plans)
  • SSL certificate auto-provisioned

BUILD SETTINGS:
  • Build command: npm run build
  • Output directory: dist
  • Environment variables: Set in Lovable project settings

PRODUCTION OPTIMIZATIONS:
  • Vite code splitting
  • Asset compression
  • CDN distribution
  • Lazy loading for routes and images

═══════════════════════════════════════════════════════════════════════════════
  14. FILE STRUCTURE
═══════════════════════════════════════════════════════════════════════════════

project-root/
├── src/
│   ├── components/
│   │   ├── ChatInterface.tsx        // Main chat UI with file upload
│   │   ├── ChatLayout.tsx           // Sidebar and header layout
│   │   ├── SettingsPanel.tsx        // Settings modal
│   │   └── ui/                      // shadcn/ui components
│   ├── pages/
│   │   ├── Index.tsx                // Main page
│   │   └── NotFound.tsx             // 404 page
│   ├── hooks/
│   │   ├── use-mobile.tsx           // Mobile detection
│   │   └── use-toast.ts             // Toast notifications
│   ├── lib/
│   │   └── utils.ts                 // Utility functions (cn, etc.)
│   ├── index.css                    // Global styles + design system
│   ├── App.tsx                      // Root component
│   └── main.tsx                     // Entry point
├── public/
│   ├── robots.txt                   // SEO configuration
│   └── favicon.ico                  // Site icon
├── .env                             // Environment variables (VITE_ prefix)
├── tailwind.config.ts               // Tailwind configuration
├── vite.config.ts                   // Vite configuration
├── AiAssistantSpecifications.txt    // This file
└── package.json                     // Dependencies

═══════════════════════════════════════════════════════════════════════════════
  15. FUTURE ENHANCEMENTS
═══════════════════════════════════════════════════════════════════════════════

PLANNED FEATURES:
  • Voice-to-text input (Web Speech API or Whisper)
  • Text-to-speech output (browser synthesis or ElevenLabs)
  • Markdown rendering in messages (code blocks, tables)
  • Image generation integration (DALL-E, Stable Diffusion)
  • Multi-model switching (GPT-4, Claude, LLaMA)
  • Collaborative chat sessions (multiple users)
  • Plugin system for custom tools
  • Mobile app (React Native or PWA)

═══════════════════════════════════════════════════════════════════════════════
  16. SUPPORT & DOCUMENTATION
═══════════════════════════════════════════════════════════════════════════════

RESOURCES:
  • Lovable Docs: https://docs.lovable.dev
  • React Docs: https://react.dev
  • Tailwind Docs: https://tailwindcss.com
  • shadcn/ui: https://ui.shadcn.com
  • Framer Motion: https://www.framer.com/motion

COMMUNITY:
  • Lovable Discord: https://discord.com/channels/1119885301872070706
  • GitHub Discussions: (if open-sourced)

═══════════════════════════════════════════════════════════════════════════════

END OF SPECIFICATIONS

LONI ASSISTANT — Built for sovereign autonomy. Every pixel radiates encrypted
legend. No traceability. No compromise. Pure kinetic intelligence.

╚══════════════════════════════════════════════════════════════════════════════╝
